(function() {var type_impls = {
"paranoid_android":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Layer%3CS,+N,+E,+W%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Layer%3CS,+N,+E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, E, W&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Layer&lt;S, N, E, W&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","paranoid_android::layer::Layer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Layer%3CS,+N,+E,+W%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Layer%3CS,+N,+E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, E, W&gt; Layer&lt;S&gt; for Layer&lt;S, N, E, W&gt;<div class=\"where\">where\n    S: Subscriber + for&lt;'a&gt; LookupSpan&lt;'a&gt;,\n    N: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,\n    E: FormatEvent&lt;S, N&gt; + 'static,\n    W: for&lt;'writer&gt; MakeWriter&lt;'writer&gt; + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, id: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, _span: &amp;Id, _follows: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, _event: &amp;Event&lt;'_&gt;, _ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details></div></details>","Layer<S>","paranoid_android::layer::Layer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS,+N,+E,+W%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS,+N,+E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, E, W&gt; Layer&lt;S, N, E, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_fields\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fmt_fields</a>&lt;N2&gt;(self, fmt_fields: N2) -&gt; Layer&lt;S, N2, E, W&gt;<div class=\"where\">where\n    N2: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the field formatter that the layer being built will use to record\nfields.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_fmt_fields\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_fmt_fields</a>&lt;N2&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(N) -&gt; N2) -&gt; Layer&lt;S, N2, E, W&gt;<div class=\"where\">where\n    N2: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Updates the field formatter by applying a function to the existing field formatter.</p>\n<p>This sets the field formatter that the layer being built will use to record fields.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Updating a field formatter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tracing_subscriber::field::MakeExt;\n<span class=\"kw\">let </span>layer = tracing_subscriber::fmt::layer()\n    .map_fmt_fields(|f| f.debug_alt());</code></pre></div>\n</div></details></div></details>",0,"paranoid_android::layer::Layer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS,+N,+E,+W%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS,+N,+E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, E, W&gt; Layer&lt;S, N, E, W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_writer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_writer</a>&lt;W2&gt;(self, make_writer: W2) -&gt; Layer&lt;S, N, E, W2&gt;<div class=\"where\">where\n    W2: for&lt;'writer&gt; MakeWriter&lt;'writer&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the [<code>MakeWriter</code>] that the layer being built will use to write events.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Using <code>stderr</code> rather than <code>stdout</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>tracing_subscriber::fmt;\n\n<span class=\"kw\">let </span>layer = fmt::layer()\n    .with_writer(io::stderr);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">writer</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;W</a></h4></section></summary><div class=\"docblock\"><p>Borrows the <a href=\"MakeWriter\">writer</a> for this [<code>Layer</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">writer_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a></h4></section></summary><div class=\"docblock\"><p>Mutably borrows the <a href=\"MakeWriter\">writer</a> for this [<code>Layer</code>].</p>\n<p>This method is primarily expected to be used with the\n<a href=\"crate::reload::Handle::modify\"><code>reload::Handle::modify</code></a> method.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>layer = fmt::layer().with_writer(non_blocking(std::io::stderr()));\n<span class=\"kw\">let </span>(layer, reload_handle) = reload::Layer::new(layer);\n<span class=\"macro\">info!</span>(<span class=\"string\">\"This will be logged to stderr\"</span>);\nreload_handle.modify(|layer| <span class=\"kw-2\">*</span>layer.writer_mut() = non_blocking(std::io::stdout()));\n<span class=\"macro\">info!</span>(<span class=\"string\">\"This will be logged to stdout\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_test_writer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_test_writer</a>(self) -&gt; Layer&lt;S, N, E, TestWriter&gt;</h4></section></summary><div class=\"docblock\"><p>Configures the layer to support <a href=\"https://doc.rust-lang.org/book/ch11-02-running-tests.html#showing-function-output\"><code>libtest</code>’s output capturing</a> when used in\nunit tests.</p>\n<p>See <a href=\"super::writer::TestWriter\"><code>TestWriter</code></a> for additional details.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Using <a href=\"super::writer::TestWriter\"><code>TestWriter</code></a> to let <code>cargo test</code> capture test output:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>tracing_subscriber::fmt;\n\n<span class=\"kw\">let </span>layer = fmt::layer()\n    .with_test_writer();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_ansi\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_ansi</a>(self, ansi: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; Layer&lt;S, N, E, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not the formatter emits ANSI terminal escape codes\nfor colors and other text formatting.</p>\n<p>When the “ansi” crate feature flag is enabled, ANSI colors are enabled\nby default unless the <a href=\"https://no-color.org/\"><code>NO_COLOR</code></a> environment variable is set to\na non-empty value.  If the <a href=\"https://no-color.org/\"><code>NO_COLOR</code></a> environment variable is set to\nany non-empty value, then ANSI colors will be suppressed by default.\nThe <a href=\"Subscriber::with_ansi\"><code>with_ansi</code></a> and <a href=\"Subscriber::set_ansi\"><code>set_ansi</code></a> methods can be used to forcibly\nenable ANSI colors, overriding any <a href=\"https://no-color.org/\"><code>NO_COLOR</code></a> environment variable.</p>\n<p>Enabling ANSI escapes (calling <code>with_ansi(true)</code>) requires the “ansi”\ncrate feature flag. Calling <code>with_ansi(true)</code> without the “ansi”\nfeature flag enabled will panic if debug assertions are enabled, or\nprint a warning otherwise.</p>\n<p>This method itself is still available without the feature flag. This\nis to allow ANSI escape codes to be explicitly <em>disabled</em> without\nhaving to opt-in to the dependencies required to emit ANSI formatting.\nThis way, code which constructs a formatter that should never emit\nANSI escape codes can ensure that they are not used, regardless of\nwhether or not other crates in the dependency graph enable the “ansi”\nfeature flag.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log_internal_errors\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">log_internal_errors</a>(self, log_internal_errors: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; Layer&lt;S, N, E, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether to write errors from <a href=\"crate::fmt::FormatEvent\"><code>FormatEvent</code></a> to the writer.\nDefaults to true.</p>\n<p>By default, <code>fmt::Layer</code> will write any <code>FormatEvent</code>-internal errors to\nthe writer. These errors are unlikely and will only occur if there is a\nbug in the <code>FormatEvent</code> implementation or its dependencies.</p>\n<p>If writing to the writer fails, the error message is printed to stderr\nas a fallback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_writer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_writer</a>&lt;W2&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(W) -&gt; W2) -&gt; Layer&lt;S, N, E, W2&gt;<div class=\"where\">where\n    W2: for&lt;'writer&gt; MakeWriter&lt;'writer&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Updates the [<code>MakeWriter</code>] by applying a function to the existing [<code>MakeWriter</code>].</p>\n<p>This sets the [<code>MakeWriter</code>] that the layer being built will use to write events.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Redirect output to stderr if level is &lt;= WARN:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tracing::Level;\n<span class=\"kw\">use </span>tracing_subscriber::fmt::{<span class=\"self\">self</span>, writer::MakeWriterExt};\n\n<span class=\"kw\">let </span>stderr = std::io::stderr.with_max_level(Level::WARN);\n<span class=\"kw\">let </span>layer = fmt::layer()\n    .map_writer(<span class=\"kw\">move </span>|w| stderr.or_else(w));</code></pre></div>\n</div></details></div></details>",0,"paranoid_android::layer::Layer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS,+N,+E,+W%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS,+N,+E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, E, W&gt; Layer&lt;S, N, E, W&gt;<div class=\"where\">where\n    S: Subscriber + for&lt;'a&gt; LookupSpan&lt;'a&gt;,\n    N: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,\n    W: for&lt;'writer&gt; MakeWriter&lt;'writer&gt; + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_format\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">event_format</a>&lt;E2&gt;(self, e: E2) -&gt; Layer&lt;S, N, E2, W&gt;<div class=\"where\">where\n    E2: FormatEvent&lt;S, N&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the <a href=\"format::FormatEvent\">event formatter</a> that the layer being built will\nuse to format events.</p>\n<p>The event formatter may be any type implementing the <a href=\"format::FormatEvent\"><code>FormatEvent</code></a>\ntrait, which is implemented for all functions taking a [<code>FmtContext</code>], a\n<a href=\"format::Writer\"><code>Writer</code></a>, and an <a href=\"tracing::Event\"><code>Event</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Setting a type implementing <a href=\"format::FormatEvent\"><code>FormatEvent</code></a> as the formatter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tracing_subscriber::fmt::{<span class=\"self\">self</span>, format};\n\n<span class=\"kw\">let </span>layer = fmt::layer()\n    .event_format(format().compact());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_event_format\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_event_format</a>&lt;E2&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(E) -&gt; E2) -&gt; Layer&lt;S, N, E2, W&gt;<div class=\"where\">where\n    E2: FormatEvent&lt;S, N&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Updates the event formatter by applying a function to the existing event formatter.</p>\n<p>This sets the event formatter that the layer being built will use to record fields.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Updating an event formatter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>layer = tracing_subscriber::fmt::layer()\n    .map_event_format(|e| e.compact());</code></pre></div>\n</div></details></div></details>",0,"paranoid_android::layer::Layer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS,+N,+Format%3CL,+T%3E,+W%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS,+N,+Format%3CL,+T%3E,+W%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, N, L, T, W&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;<div class=\"where\">where\n    N: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_timer\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_timer</a>&lt;T2&gt;(self, timer: T2) -&gt; Layer&lt;S, N, Format&lt;L, T2&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Use the given <a href=\"super::time::FormatTime\"><code>timer</code></a> for span and event timestamps.</p>\n<p>See the <a href=\"mod@super::time\"><code>time</code> module</a> for the provided timer implementations.</p>\n<p>Note that using the <code>&quot;time</code>“” feature flag enables the\nadditional time formatters <a href=\"super::time::UtcTime\"><code>UtcTime</code></a> and <a href=\"super::time::LocalTime\"><code>LocalTime</code></a>, which use the\n<a href=\"https://docs.rs/time/0.3\"><code>time</code> crate</a> to provide more sophisticated timestamp formatting\noptions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.without_time\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">without_time</a>(self) -&gt; Layer&lt;S, N, Format&lt;L, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Do not emit timestamps with spans and event.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_span_events\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_span_events</a>(self, kind: FmtSpan) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Configures how synthesized events are emitted at points in the <a href=\"https://docs.rs/tracing/latest/tracing/span/index.html#the-span-lifecycle\">span\nlifecycle</a>.</p>\n<p>The following options are available:</p>\n<ul>\n<li><code>FmtSpan::NONE</code>: No events will be synthesized when spans are\ncreated, entered, exited, or closed. Data from spans will still be\nincluded as the context for formatted events. This is the default.</li>\n<li><code>FmtSpan::NEW</code>: An event will be synthesized when spans are created.</li>\n<li><code>FmtSpan::ENTER</code>: An event will be synthesized when spans are entered.</li>\n<li><code>FmtSpan::EXIT</code>: An event will be synthesized when spans are exited.</li>\n<li><code>FmtSpan::CLOSE</code>: An event will be synthesized when a span closes. If\n<a href=\"Layer::without_time()\">timestamps are enabled</a> for this formatter, the generated\nevent will contain fields with the span’s <em>busy time</em> (the total\ntime for which it was entered) and <em>idle time</em> (the total time that\nthe span existed but was not entered).</li>\n<li><code>FmtSpan::ACTIVE</code>: Events will be synthesized when spans are entered\nor exited.</li>\n<li><code>FmtSpan::FULL</code>: Events will be synthesized whenever a span is\ncreated, entered, exited, or closed. If timestamps are enabled, the\nclose event will contain the span’s busy and idle time, as\ndescribed above.</li>\n</ul>\n<p>The options can be enabled in any combination. For instance, the following\nwill synthesize events whenever spans are created and closed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tracing_subscriber::fmt;\n<span class=\"kw\">use </span>tracing_subscriber::fmt::format::FmtSpan;\n\n<span class=\"kw\">let </span>subscriber = fmt()\n    .with_span_events(FmtSpan::NEW | FmtSpan::CLOSE)\n    .finish();</code></pre></div>\n<p>Note that the generated events will only be part of the log output by\nthis formatter; they will not be recorded by other <code>Subscriber</code>s or by\n<code>Layer</code>s added to this subscriber.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_target\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_target</a>(self, display_target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not an event’s target is displayed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_file\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_file</a>(self, display_filename: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not an event’s <a href=\"tracing_core::Metadata::file\">source code file path</a> is\ndisplayed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_line_number\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_line_number</a>(\n    self,\n    display_line_number: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not an event’s <a href=\"tracing_core::Metadata::line\">source code line number</a> is\ndisplayed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_level\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_level</a>(self, display_level: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not an event’s level is displayed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_thread_ids\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_thread_ids</a>(\n    self,\n    display_thread_ids: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not the <a href=\"https://doc.rust-lang.org/nightly/std/thread/struct.ThreadId.html\" title=\"struct std::thread::ThreadId\">thread ID</a> of the current thread is displayed\nwhen formatting events.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_thread_names\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_thread_names</a>(\n    self,\n    display_thread_names: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; Layer&lt;S, N, Format&lt;L, T&gt;, W&gt;</h4></section></summary><div class=\"docblock\"><p>Sets whether or not the <a href=\"https://doc.rust-lang.org/nightly/std/thread/index.html#naming-threads\" title=\"mod std::thread\">name</a> of the current thread is displayed\nwhen formatting events.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">compact</a>(self) -&gt; Layer&lt;S, N, Format&lt;Compact, T&gt;, W&gt;<div class=\"where\">where\n    N: for&lt;'writer&gt; FormatFields&lt;'writer&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Sets the layer being built to use a [less verbose formatter][super::format::Compact].</p>\n</div></details></div></details>",0,"paranoid_android::layer::Layer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()